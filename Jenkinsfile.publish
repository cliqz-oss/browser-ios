#!/bin/env groovy

@Library('cliqz-shared-library@vagrant') _

properties([
    disableConcurrentBuilds(), 
    [$class: 'JobRestrictionProperty']
])
node('mac-vm-host') {
    def branchName = "${BRANCH_NAME}"

    writeFile file: 'Vagrantfile', text: '''
    Vagrant.configure("2") do |config|
        config.vm.box = "browser-ios-v288"
        
        config.vm.define "nightlyios" do |nightlyios|
            nightlyios.vm.hostname ="nightlyios"
            
            nightlyios.vm.network "public_network", :bridge => "en0", auto_config: false
            nightlyios.vm.boot_timeout = 900
            nightlyios.vm.provider "vmware_fusion" do |v|
                v.name = "nightlyios"
                v.whitelist_verified = true
                v.gui = false
                v.memory = ENV["NODE_MEMORY"]
                v.cpus = ENV["NODE_CPU_COUNT"]
                v.cpu_mode = "host-passthrough"
                v.vmx["remotedisplay.vnc.enabled"] = "TRUE"
                v.vmx["RemoteDisplay.vnc.port"] = ENV["NODE_VNC_PORT"]
                v.vmx["ethernet0.pcislotnumber"] = "33"
            end
            nightlyios.vm.provision "shell", privileged: false, run: "always", inline: <<-SHELL#!/bin/bash -l
                set -e
                set -x
                rm -f agent.jar
                curl -LO #{ENV['JENKINS_URL']}/jnlpJars/agent.jar
                ls .
                java -version
                nohup java -jar agent.jar -jnlpUrl #{ENV['JENKINS_URL']}/computer/#{ENV['NODE_ID']}/slave-agent.jnlp -secret #{ENV["NODE_SECRET"]} &
            SHELL
        end
    end
    '''

    vagrant.inside(
        'Vagrantfile',
        '/jenkins',
        4, // CPU
        8000, // MEMORY
        12000, // VNC port
        false, // rebuild image
    ) { nodeId ->
        node(nodeId) {
            stage('Checkout') {
                checkout scm
            }

            stage('Prepare') {
                sh '''#!/bin/bash -l
                    set -e
                    set -x
                    java -version
                    node -v
                    npm -v
                    yarn -v
                    xcodebuild -version
                    pkgutil --pkg-info=com.apple.pkg.CLTools_Executables
                    sudo xcodebuild -license accept
                    brew -v
                    npm -g install yarn
                    carthage bootstrap --verbose --platform ios --color auto --no-use-binaries
                    yarn install
                    pod install
                '''                
            }

            if("${branchName}".contains("development") || "${branchName}".contains("-beta")){
                stage('Build & Upload') {
                    withCredentials([
                        [
                            $class          : 'UsernamePasswordMultiBinding',
                            credentialsId   : '85859bba-4927-4b14-bfdf-aca726009962',
                            passwordVariable: 'GITHUB_PASSWORD',
                            usernameVariable: 'GITHUB_USERNAME',
                        ],
                        string(credentialsId: '8b4f7459-c446-4058-be61-3c3d98fe72e2', variable: 'ITUNES_USER'),
                        string(credentialsId: 'd1c8fe0f-6481-4aec-8c6f-e0bbc5ec82b9', variable: 'SentryDSN'),
                        string(credentialsId: '05be12cd-5177-4adf-9812-809f01451fa0', variable: 'FASTLANE_PASSWORD'),
                        string(credentialsId: 'ea8c47ad-1de8-4300-ae93-ec9ff4b68f39', variable: 'MATCH_PASSWORD')]) 
                    {
                        sh '''#!/bin/bash -l
                            set -x
                            set -e
                            rm -rf /Users/vagrant/Library/Keychains/ios-build.keychain*
                            export MATCH_KEYCHAIN_NAME=ios-build.keychain      
                            fastlane beta    
                        '''
                    }
                }
            }
            else if ("${branchName}".contains("-r")){
                stage('Build & Upload') {
                    withCredentials([
                        [
                            $class          : 'UsernamePasswordMultiBinding',
                            credentialsId   : '85859bba-4927-4b14-bfdf-aca726009962',
                            passwordVariable: 'GITHUB_PASSWORD',
                            usernameVariable: 'GITHUB_USERNAME',
                        ],
                        string(credentialsId: '8b4f7459-c446-4058-be61-3c3d98fe72e2', variable: 'ITUNES_USER'),
                        string(credentialsId: 'c21d2e60-e4b9-4f75-bad7-6736398a1a05', variable: 'SentryDSN'),
                        string(credentialsId: '05be12cd-5177-4adf-9812-809f01451fa0', variable: 'FASTLANE_PASSWORD'),
                        string(credentialsId: 'ea8c47ad-1de8-4300-ae93-ec9ff4b68f39', variable: 'MATCH_PASSWORD')]) 
                    {
                        sh '''#!/bin/bash -l
                            set -x
                            set -e
                            rm -rf /Users/vagrant/Library/Keychains/ios-build.keychain*
                            export MATCH_KEYCHAIN_NAME=ios-build.keychain      
                            fastlane beta    
                        '''
                    }
                }
            }
            stage('Clean Up'){
                sh '''#!/bin/bash -l
                    set -x
                    set -e
                    rm -rf Cartfile.resolved Carthage node_modules Podfile.lock Pods  
                '''
            }
        }
    }
}
